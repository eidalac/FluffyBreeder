:: Color Config [widget nobr]

/* **********
 * colorConfig.tw
 *
 * Package: FluffyBreeder
 * Format: Twine2 (Sugarcube 2)
 *
 * Data for color configuration/pricing
 *
 *********** */


  
  
/* ***
 *	Color Value
 *	Call as <<colorValue>>
 *
 *	Caculates the color value of $activeFluffy
 *** */
<<widget "colorValue">>
	<<set _coatTier = "">>
	<<set _maneTier = "">>
	<<set _eyeTier = "">>
	
	<<set _coatGroup = "">>
	<<set _maneGroup = "">>
	<<set _eyeGroup = "">>

	/* Interate through the list of colors, if they match, remember the tier and group.*/
	<<for _i = 0; _i < $colors.length; _i++>>

		<<if $activeFluffy.cColor.name== $colors[_i].name>>
			<<set _coatTier = $colors[_i].tier>>
			<<set _coatGroup = $colors[_i].group>>
		<</if>>
		<<if $activeFluffy.mColor.name == $colors[_i].name>>
			<<set _maneTier = $colors[_i].tier>>
			<<set _maneGroup = $colors[_i].group>>
		<</if>>
		<<if $activeFluffy.eColor.name == $colors[_i].name>>
			<<set _eyeTier = $colors[_i].tier>>
			<<set _eyeGroup = $colors[_i].group>>
		<</if>>
	<</for>>

	/* No matches found, bad*/
	<<if _coatTier == "" || _coatGroup == "">>
		<br>@@.red;No color match found for coat: <<print $activeFluffy.ID>>.
	<</if>>
	<<if _maneTier == "" || _maneGroup == "">>
		<br>@@.red;No color match found for mane: <<print $activeFluffy.ID>>.
	<</if>>
	<<if _eyeTier == "" || _eyeGroup == "">>
		<br>@@.red;No color match found for eye: <<print $activeFluffy.ID>>.
	<</if>>	

	/* One point per tier for eyes, 2 for mane and 3 for coat. */
	<<set _colorBonus = 0>>
	<<set _colorBonus = Number(_eyeTier)>>
	<<set _colorBonus += (2 * _maneTier)>>
	<<set _colorBonus += (3 * _coatTier)>>
	
	/* Divide by 6 to get the multplier (1-6) */
	<<set _colorBonus = Number(_colorBonus / 12).toFixed(2)>>
	
	/* ***
	 *	Complimentary pairs:
	 *		Blue - Orange
	 *		Red - Green
	 *		Yellow - Purple
	 *** */
  
	<<set _pairBonus = 0>>
	
	/* Colors match */
	<<if _coatGroup == _maneGroup>>
		<<if _coatGroup == "Brown">>
			<<set _pairBonus = 0>>
		<<else>>
			<<set _pairBonus = 0.75>>
		<</if>>
	
	/* Complimentary pair */
	<<elseif _coatGroup == "Blue" && _maneGroup == "Orange">>
		<<set _pairBonus = 0.5>>
	<<elseif _coatGroup == "Orange" && _maneGroup == "Blue">>
		<<set _pairBonus = 0.5>>
	<<elseif _coatGroup == "Red" && _maneGroup == "Green">>
		<<set _pairBonus = 0.5>>
	<<elseif _coatGroup == "Green" && _maneGroup == "Red">>
		<<set _pairBonus = 0.5>>
	<<elseif _coatGroup == "Yellow" && _maneGroup == "Purple">>
		<<set _pairBonus = 0.5>>
	<<elseif _coatGroup == "Purple" && _maneGroup == "Yellow">>
		<<set _pairBonus = 0.5>>
	<<elseif _coatGroup == "Brown" && _maneGroup == "Brown">>
		<<set _pairBonus = 0>>
	<</if>>
	<<set $activeFluffy.colorBonus = Number(_colorBonus) + Number(_pairBonus)>>
	
	<<set $activeFluffy.colorBonus = Math.clamp($activeFluffy.colorBonus, 0.05, 5)>>
<</widget>>


/* ***
 *	Limit Color
 *	Call as <<limitValue [low,] high>>
 *
 *	Limits the color tier of a generated fluffy ($activeFluffy) to a value >= low, <= high.
 *	Used to limit the colors you can get from different sources.
 *** */
<<widget "limitColor">>
	<<if ndef(_args)>>
		<<run console.log(`ERROR: <<limitColor>>: Called with no arguments.`)>>
	<<elseif _args.length > 2>>
		<<run console.log(`ERROR: <<limitColor>>: Called with too many arguments.`)>>
	<<else>>
		<<set _wGene = [ "W/w;", "W/W;", "w/W;" ]>>

		/* Some logic/sanity checking: */ 
		<<script>>
			if (state.temporary.args.length == 1)
			{
				State.temporary.high = Number(Math.max(state.temporary.args[0], 6));
				State.temporary.low = Number(Math.min(state.temporary.args[0], 1));
			}
			else
			{
				State.temporary.high = Number(Math.max(state.temporary.args[0], state.temporary.args[1], 6));
				State.temporary.low = Number(Math.min(state.temporary.args[0], state.temporary.args[1], 1));
			}
		<</script>>

		/* Ignor eyes, only look at coat and mane */
		<<set _nColors = clone($colors)>>

		/* Interate through the list of colors, if they match, remember the tier and group.*/
		<<run _nColors.deleteWith(function (val) { 	return val.tier < _low; })>>
		<<run _nColors.deleteWith(function (val) { 	return val.tier > _high; })>>

		/* Now we have an arry for colors that are within the specified ranges.*/
	
		/*  	have to set the genes... */
		<<set _randomCoat = _nColors.random()>>
		<<set _randomMane = _nColors.random()>>

		<<run $activeFluffy.genes.setManeColor(_randomMane.gene + _wGene.random())>>
		<<run $activeFluffy.genes.setCoatColor(_randomCoat.gene + _wGene.random())>>
		<<run $activeFluffy.genes.setEyeColor(_nColors.random().gene + _wGene.random())>>

		<<set $activeFluffy.geneString = $activeFluffy.genes.toString()>>

		<<set $activeFluffy.mColor.name = $activeFluffy.genes.getManeColorObject()>>
		<<set $activeFluffy.cColor.name= $activeFluffy.genes.getCoatColorObject()>>
		<<set $activeFluffy.eColor.name = $activeFluffy.genes.getEyeColorObject()>>
	<</if>>
	
<</widget>>

/* ***
 *	Color Group
 *	Call as <<colorGroup $fluffy>>
 *
 *	Finds the color group of $fluffy)
 *** */
<<widget "colorGroup">>
	<<fluffyError _args[0]>>
	<<if $fluffyError>>
		<<run console.log(`ERROR: <<colorGroup>>: ${$fluffyError}.`)>>
		<<set $fluffyError = false>>
	<<else>>
		<<if _args[0]>>
			<<set _hslFluffy = _args[0]>>
		<<else>>
			<<set _hslFluffy = $activeFluffy>>
		<</if>>
		
		<<set _hslCoat = hexToHSL(_hslFluffy.cColor.hex)>>
		<<set _hslMane = hexToHSL(_hslFluffy.mColor.hex)>>
		<<set _hslEyes = hexToHSL(_hslFluffy.eColor.hex)>>
		<<set _hslFluffy.colorGroup = ["", "", ""]>>

		<<run console.log(`DEBUG: colorGroup: _hslCoat = ${_hslCoat}, _hslMane = ${_hslMane}, _hslEyes = ${_hslEyes}.`)>>

		<<for _i = 0; _i < groupList.length-2; _i++>>
			<<capture _i>>
				<<if inRange(_hslCoat[0].toFixed(0), groupList[_i].hue, groupList[_i+1].hue)>>
					<<set _hslFluffy.colorGroup[0] = groupList[_i].name>>
				<<elseif _hslCoat[0].toFixed(0) >= groupList[groupList.length-1].hue>>
					<<set _hslFluffy.colorGroup[0] = groupList[groupList.length-1].name>>
				<</if>>
				<<if inRange(_hslMane[0].toFixed(0), groupList[_i].hue, groupList[_i+1].hue)>>
					<<set _hslFluffy.colorGroup[1] = groupList[_i].name>>
				<<elseif _hslMane[0].toFixed(0) >= groupList[groupList.length-1].hue>>
					<<set _hslFluffy.colorGroup[1] = groupList[groupList.length-1].name>>
				<</if>>
				<<if inRange(_hslEyes[0].toFixed(0), groupList[_i].hue, groupList[_i+1].hue)>>
					<<set _hslFluffy.colorGroup[2] = groupList[_i].name>>
				<<elseif _hslEyes[0].toFixed(0) >= groupList[groupList.length-1].hue>>
					<<set _hslFluffy.colorGroup[2] = groupList[groupList.length-1].name>>
				<</if>>
			<</capture>>
		<</for>>

		/* No matches found, bad*/
		<<if _hslFluffy.colorGroup[0] == "">>
			<br>@@.red;No color match found for coat: <<print _fluffy.ID>>.
		<</if>>
		<<if _hslFluffy.colorGroup[1] == "">>
			<br>@@.red;No color match found for mane: <<print _fluffy.ID>>.
		<</if>>
		<<if _hslFluffy.colorGroup[2] == "">>
			<br>@@.red;No color match found for eye: <<print _fluffy.ID>>.
		<</if>>	
	<</if>>
<</widget>>

/* ***
 *	Call as <<setFilters $fluffy>>
 *	Set new filter values
 *** */
<<widget "setFilters">>
	<<if _args[0]>>
		<<set _fluffy = _args[0]>>
	<<else>>
		<<set _fluffy = $activeFluffy>>
	<</if>>
	
	<<set _fluffy.cColor.filter = hexToFilter(_hslFluffy.cColor.hex)>>
	<<set _fluffy.mColor.filter = hexToFilter(_hslFluffy.mColor.hex)>>
	<<set _fluffy.eColor.filter = hexToFilter(_hslFluffy.eColor.hex)>>
<</widget>>

/* ***
 *	Call as <<fixColors $fluffy>>
 *	Fixes deprecated color values
 *** */
<<widget "fixColors">>
	<<if _args[0]>>
		<<set _fixFluffy = _args[0]>>
	<<else>>
		<<set _fixFluffy = $activeFluffy>>
	<</if>>

	<<if def typeof _fixFluffy.cColor === 'string' || typeof _fixFluffy.mColor === 'string' || typeof _fixFluffy.eColor === 'string'>>
		<<set _colorRegEx = /([\ \-#])|(\(.*\))|([0-9])/gi>>
		<<set _nameRegEx = /([#])|(\ \(.*\))|([0-9])/gi>>

		<<for _i = 0; _i < colorList.length; _i++>>
			<<capture _i>>
				<<set _name = colorList[_i].name>>
				<<if typeof _fixFluffy.cColor === 'string' && _fixFluffy.cColor.toLowerCase() === _name.toLowerCase().replace(_colorRegEx, '')>>
					<<run console.log("Match "+colorList[_i].name+" "+colorList[_i].hex)>>
					<<set _fixFluffy.cColor = { name: _name.replace(_nameRegEx, ''), hex: colorList[_i].hex }>>
				<</if>>
				<<if typeof _fixFluffy.mColor === 'string' && _fixFluffy.mColor.toLowerCase() === _name.toLowerCase().replace(_colorRegEx, '')>>
					<<run console.log("Match "+colorList[_i].name+" "+colorList[_i].hex)>>
					<<set _fixFluffy.mColor = { name: _name.replace(_nameRegEx, ''), hex: colorList[_i].hex }>>
				<</if>>
				<<if  typeof _fixFluffy.eColor === 'string' && _fixFluffy.eColor.toLowerCase() === _name.toLowerCase().replace(_colorRegEx, '')>>
					<<run console.log("Match "+colorList[_i].name+" "+colorList[_i].hex)>>
					<<set _fixFluffy.eColor = { name: _name.replace(_nameRegEx, ''), hex: colorList[_i].hex }>>
				<</if>>
			<</capture>>
		<</for>>
	<</if>>

	<<colorGroup _fixFluffy>>
	<<setFilters _fixFluffy>>
<</widget>>