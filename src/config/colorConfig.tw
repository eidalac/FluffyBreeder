:: Color Config [widget nobr]

/* **********
 * colorConfig.tw
 *
 * Package: FluffyBreeder
 * Format: Twine2 (Sugarcube 2)
 *
 * Data for color configuration/pricing
 *
 *********** */

 
  
/* ***
 *	Color Value
 *	Call as <<colorValue>>
 *
 *	Caculates the color value of $activeFluffy
 *** */
<<widget "colorValue">>

	<<set _cAppeal = getColorAppeal($activeFluffy.cColor.hex)>>
	<<set _mAppeal = getColorAppeal($activeFluffy.mColor.hex)>>
	<<set _eAppeal = getColorAppeal($activeFluffy.eColor.hex)>>

	<<set _coatGroup = $activeFluffy.cColor.group>>
	<<set _maneGroup = $activeFluffy.mColor.group>>
	<<set _eyeGroup = $activeFluffy.eColor.group>>

	/* One point per tier for eyes, 2 for mane and 3 for coat. */
	<<set _netAppeal = Number(_cAppeal)>>
	<<set _netAppeal = Number(_netAppeal) + Number(Number(_mAppeal) / 2).toFixed(0)>>
	<<set _netAppeal = Number(_netAppeal) + Number(Number(_eAppeal) / 3).toFixed(0)>>
	<<set _netAppeal = Math.clamp(_netAppeal, 1, 180)>>

	<<run console.log(`DEBUG: <<colorValue>>: Bonus 1 = ${_netAppeal}.`)>>
	
	/* Now it's a %, from 1-180% */
	<<set _netAppeal = Number(_netAppeal / 100).toFixed(2)>>

	<<run console.log(`DEBUG: <<colorValue>>: Bonus 2 = ${_netAppeal}. (${_coatGroup}, ${_maneGroup}, ${_eyeGroup})`)>>
	
	/* ***
	 *	Complimentary pairs:
	 *		Blue - Orange
	 *		Red - Green
	 *		Yellow - Purple
	 *** */
  
	<<set _pairBonus = 0>>
	
	/* Colors match */
	<<if _coatGroup == _maneGroup>>
		<<if _coatGroup == "Brown">>
			<<set _pairBonus = 0>>
		<<else>>
			<<set _pairBonus = 0.75>>
		<</if>>
	
	/* Complimentary pair */
	<<elseif _coatGroup == "Black" && _maneGroup == "White">>
		<<set _pairBonus = 0.5>>
	<<elseif _coatGroup == "White" && _maneGroup == "Black">>
		<<set _pairBonus = 0.5>>
	<<elseif _coatGroup == "Blue" && _maneGroup == "Orange">>
		<<set _pairBonus = 0.5>>
	<<elseif _coatGroup == "Orange" && _maneGroup == "Blue">>
		<<set _pairBonus = 0.5>>
	<<elseif _coatGroup == "Red" && _maneGroup == "Green">>
		<<set _pairBonus = 0.5>>
	<<elseif _coatGroup == "Green" && _maneGroup == "Red">>
		<<set _pairBonus = 0.5>>
	<<elseif _coatGroup == "Yellow" && _maneGroup == "Purple">>
		<<set _pairBonus = 0.5>>
	<<elseif _coatGroup == "Purple" && _maneGroup == "Yellow">>
		<<set _pairBonus = 0.5>>
	<<elseif _coatGroup == "Brown" && _maneGroup == "Brown">>
		<<set _pairBonus = 0>>
	<</if>>

	<<run console.log(`DEBUG: <<colorValue>>: Bonus 3 = ${_netAppeal}, pair bonus = ${_pairBonus}.`)>>

	<<set _colorBonus = Number(_netAppeal + _pairBonus).toFixed(2)>>

	<<run console.log(`DEBUG: <<colorValue>>: Bonus 4 = ${_colorBonus}.`)>>

	<<set _colorBonus = Number(Number(_colorBonus).toFixed(2) * Number(2).toFixed(2)).toFixed(2)>>

	<<run console.log(`DEBUG: <<colorValue>>: Bonus 5 = ${_colorBonus}.`)>>

	<<set $activeFluffy.colorBonus = Number(Math.clamp(_colorBonus, 0.05, 6.00)).toFixed(2)>>

	<<run console.log(`DEBUG: <<colorValue>>: Bonus 6 = ${$activeFluffy.colorBonus}.`)>>
<</widget>>


/* ***
 *	Limit Color
 *	Call as <<limitValue [low,] high>>
 *
 *	Limits the color tier of a generated fluffy ($activeFluffy) to a value >= low, <= high.
 *	Used to limit the colors you can get from different sources.
 *** */
<<widget "limitColor">>
/*
	<<if ndef(_args)>>
		<<run console.log(`ERROR: <<limitColor>>: Called with no arguments.`)>>
	<<elseif _args.length > 2>>
		<<run console.log(`ERROR: <<limitColor>>: Called with too many arguments.`)>>
	<<else>>
		<<set _wGene = [ "W/w;", "W/W;", "w/W;" ]>>

		<<script>>
			if (state.temporary.args.length == 1)
			{
				State.temporary.high = Number(Math.max(state.temporary.args[0], 6));
				State.temporary.low = Number(Math.min(state.temporary.args[0], 1));
			}
			else
			{
				State.temporary.high = Number(Math.max(state.temporary.args[0], state.temporary.args[1], 6));
				State.temporary.low = Number(Math.min(state.temporary.args[0], state.temporary.args[1], 1));
			}
		<</script>>

		<<set _nColors = clone($colors)>>

		<<run _nColors.deleteWith(function (val) { 	return val.tier < _low; })>>
		<<run _nColors.deleteWith(function (val) { 	return val.tier > _high; })>>

		<<set _randomCoat = _nColors.random()>>
		<<set _randomMane = _nColors.random()>>

		<<run $activeFluffy.genes.setManeColor(_randomMane.gene + _wGene.random())>>
		<<run $activeFluffy.genes.setCoatColor(_randomCoat.gene + _wGene.random())>>
		<<run $activeFluffy.genes.setEyeColor(_nColors.random().gene + _wGene.random())>>

		<<set $activeFluffy.geneString = $activeFluffy.genes.toString()>>

		<<set $activeFluffy.mColor = $activeFluffy.genes.getManeColorObject()>>
		<<set $activeFluffy.cColor = $activeFluffy.genes.getCoatColorObject()>>
		<<set $activeFluffy.eColor = $activeFluffy.genes.getEyeColorObject()>>
	<</if>>
*/	
<</widget>>

/* ***
 *	Color Group
 *	Call as <<colorGroup $fluffy>>
 *
 *	Finds the name of the color group of $fluffy.
 *	Without fluffy, will simply apply to $ntcArr.
 *** */
<<widget "colorGroup">>
	<<fluffyError _args[0]>>
	<<if $fluffyError>>
		<<run console.log(`ERROR: <<colorGroup>>: ${$fluffyError}.`)>>
		<<set $fluffyError = false>>
	<<else>>
		<<set _ntcFluffy = _args[0]>>
		<<run
			_ntcFluffy.colorGroup[0] = ntc.name(_ntcFluffy.cColor.hex)[3];
			_ntcFluffy.colorGroup[1] = ntc.name(_ntcFluffy.mColor.hex)[3];
			_ntcFluffy.colorGroup[2] = ntc.name(_ntcFluffy.eColor.hex)[3];
		>>
	<</if>>
<</widget>>

/* <<widget "colorGroup">>
	<<fluffyError _args[0]>>
	<<if $fluffyError>>
		<<run console.log(`ERROR: <<colorGroup>>: ${$fluffyError}.`)>>
		<<set $fluffyError = false>>
	<<else>>
		<<if _args[0]>>
			<<set _hslFluffy = _args[0]>>
		<<else>>
			<<set _hslFluffy = $activeFluffy>>
		<</if>>
		
		<<set _hslCoat = hexToHSL(_hslFluffy.cColor.hex)>>
		<<set _hslMane = hexToHSL(_hslFluffy.mColor.hex)>>
		<<set _hslEyes = hexToHSL(_hslFluffy.eColor.hex)>>
		<<set _hslFluffy.colorGroup = ["", "", ""]>>

		<<run console.log(`DEBUG: colorGroup: _hslCoat = ${_hslCoat}, _hslMane = ${_hslMane}, _hslEyes = ${_hslEyes}.`)>>
		console.log(ntc.name(State.variables.activeFluffy.cColor.hex))

		<<for _i = 0; _i < groupList.length-2; _i++>>
			<<capture _i>>
				<<if inRange(_hslCoat[0].toFixed(0), groupList[_i].hue, groupList[_i+1].hue)>>
					<<set _hslFluffy.colorGroup[0] = groupList[_i].name>>
				<<elseif _hslCoat[0].toFixed(0) >= groupList[groupList.length-1].hue>>
					<<set _hslFluffy.colorGroup[0] = groupList[groupList.length-1].name>>
				<</if>>
				<<if inRange(_hslMane[0].toFixed(0), groupList[_i].hue, groupList[_i+1].hue)>>
					<<set _hslFluffy.colorGroup[1] = groupList[_i].name>>
				<<elseif _hslMane[0].toFixed(0) >= groupList[groupList.length-1].hue>>
					<<set _hslFluffy.colorGroup[1] = groupList[groupList.length-1].name>>
				<</if>>
				<<if inRange(_hslEyes[0].toFixed(0), groupList[_i].hue, groupList[_i+1].hue)>>
					<<set _hslFluffy.colorGroup[2] = groupList[_i].name>>
				<<elseif _hslEyes[0].toFixed(0) >= groupList[groupList.length-1].hue>>
					<<set _hslFluffy.colorGroup[2] = groupList[groupList.length-1].name>>
				<</if>>
			<</capture>>
		<</for>>

		<<if _hslFluffy.colorGroup[0] == "">>
			<<run console.log(`ERROR: colorGroup: No color match found for coat ${_hslFluffy.cColor} on Fluffy ${_hslFluffy.ID}.`)>>
		<</if>>
		<<if _hslFluffy.colorGroup[1] == "">>
			<<run console.log(`ERROR: colorGroup: No color match found for mane ${_hslFluffy.mColor} on Fluffy ${_hslFluffy.ID}.`)>>
		<</if>>
		<<if _hslFluffy.colorGroup[2] == "">>
			<<run console.log(`ERROR: colorGroup: No color match found for eye ${_hslFluffy.eColor} on Fluffy ${_hslFluffy.ID}.`)>>
		<</if>>	
	<</if>>
<</widget>> */

/* ***
 *	Call as <<setFilters $fluffy>>
 *	Set new filter values
 *** */
<<widget "setFilters">>
	<<if _args[0]>>
		<<set _fluffy = _args[0]>>
	<<else>>
		<<set _fluffy = $activeFluffy>>
	<</if>>
	
	<<set _fluffy.cColor.filter = hexToFilter(_hslFluffy.cColor.hex)>>
	<<set _fluffy.mColor.filter = hexToFilter(_hslFluffy.mColor.hex)>>
	<<set _fluffy.eColor.filter = hexToFilter(_hslFluffy.eColor.hex)>>
<</widget>>

/* ***
 *	Call as <<fixColors $fluffy>>
 *	Fixes deprecated color values
 *** */
<<widget "fixColors">>
	<<if _args[0]>>
		<<set _fixFluffy = _args[0]>>
	<<else>>
		<<set _fixFluffy = $activeFluffy>>
	<</if>>

	<<if def typeof _fixFluffy.cColor === 'string' || typeof _fixFluffy.mColor === 'string' || typeof _fixFluffy.eColor === 'string'>>
		<<set _colorRegEx = /([\ \-#])|(\(.*\))|([0-9])/gi>>
		<<set _nameRegEx = /([#])|(\ \(.*\))|([0-9])/gi>>

		<<for _i = 0; _i < colorList.length; _i++>>
			<<capture _i>>
				<<set _name = colorList[_i].name>>
				<<if typeof _fixFluffy.cColor === 'string' && _fixFluffy.cColor.toLowerCase() === _name.toLowerCase().replace(_colorRegEx, '')>>
					<<set _fixFluffy.cColor = { name: _name.replace(_nameRegEx, ''), hex: colorList[_i].hex }>>
				<</if>>
				<<if typeof _fixFluffy.mColor === 'string' && _fixFluffy.mColor.toLowerCase() === _name.toLowerCase().replace(_colorRegEx, '')>>
					<<set _fixFluffy.mColor = { name: _name.replace(_nameRegEx, ''), hex: colorList[_i].hex }>>
				<</if>>
				<<if  typeof _fixFluffy.eColor === 'string' && _fixFluffy.eColor.toLowerCase() === _name.toLowerCase().replace(_colorRegEx, '')>>
					<<set _fixFluffy.eColor = { name: _name.replace(_nameRegEx, ''), hex: colorList[_i].hex }>>
				<</if>>
			<</capture>>
		<</for>>
	<</if>>

	<<colorGroup _fixFluffy>>
	<<setFilters _fixFluffy>>
<</widget>>